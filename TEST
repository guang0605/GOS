---- Create a Menu ----
Brand = Menu("Rx Brand", "Brand")

---- Combo ----
Brand:SubMenu("cb", "組合")
Brand.cb:Boolean("QCB", "Use Q", true)
Brand.cb:Boolean("QQB", "Use Q 優先", false)
Brand.cb:Boolean("WCB", "Use W", true)
Brand.cb:Boolean("ECB", "Use E", true)
Brand.cb:Boolean("RCB", "Use R", true)

---- Kill Steal Menu ----
Brand:SubMenu("KS", "擊殺")
Brand.KS:Boolean("KSEb", "Enable KillSteal", true)
Brand.KS:Boolean("QKS", "KS Q", true)
Brand.KS:Boolean("WKS", "KS W", true)
Brand.KS:Boolean("EKS", "KS E", true)
Brand.KS:Boolean("RKS", "KS R", true)
Brand.KS:Boolean("IgniteKS", "KS Ignite", true)

---- Drawings Menu ----
Brand:SubMenu("Draws", "繪製")
Brand.Draws:Boolean("DrawsEb", "Enable Drawings", true)
Brand.Draws:Boolean("DrawQ", "Range Q", true)
Brand.Draws:Boolean("DrawW", "Range W", true)
Brand.Draws:Boolean("DrawText", "Draw Test", true)

---- Misc Menu ----
Brand:SubMenu("AutoLvlSpell", "技能")
Brand.AutoLvlSpell:Boolean("UpSpellEb", "Enable Auto Lvl Up", true)  
Brand.AutoLvlSpell:List("AutoSkillUp", "Settings", 1, {"Q-W-E", "W-Q-E"}) 

-------------------------------------------------------Starting--------------------------------------------------------------
local BonusAP = GetBonusAP(myHero)
local CheckQDmg = (GetCastLevel(myHero, _Q)*40) + 40 + (0.65*BonusAP)
local CheckWDmg = (GetCastLevel(myHero, _W)*45) + 30 + (0.60*BonusAP)
local CheckEDmg = (GetCastLevel(myHero, _E)*35) + 35 + (0.55*BonusAP)
local CheckRDmg = (GetCastLevel(myHero, _R)*100) + 50 + (0.50*BonusAP)
local killable=0

OnLoop(function(myHero)
	------ Start Combo ------
    if IOW:Mode() == "Combo" and killable==0 then
		local target = GetCurrentTarget()
					
       local WPred = GetPredictionForPlayer(GoS:myHeroPos(),target,GetMoveSpeed(target),0,850,1100,240,false,false)
		if CanUseSpell(myHero,_W) == READY and GoS:ValidTarget(target, GetCastRange(myHero,_W)) and WPred.HitChance == 1 and Brand.cb.WCB:Value() then
		CastSkillShot(_W,WPred.PredPos.x,WPred.PredPos.y,WPred.PredPos.z)
		end
			
		if CanUseSpell(myHero,_E) == READY and GoS:ValidTarget(target, GetCastRange(myHero,_E)) and Brand.cb.ECB:Value() then
		CastTargetSpell(target, _E)

		end
		
	   local QPred = GetPredictionForPlayer(GoS:myHeroPos(),target,GetMoveSpeed(target),1200,250,1150,80,true,false)
	    if GotBuff(target, "brandablaze") ~= 0 and CanUseSpell(myHero,_Q) == READY and GoS:ValidTarget(target, GetCastRange(myHero,_Q)) and QPred.HitChance == 1 and Brand.cb.QCB:Value() then
		CastSkillShot(_Q,QPred.PredPos.x,QPred.PredPos.y,QPred.PredPos.z)
		end

	    if CanUseSpell(myHero,_Q) == READY and GoS:ValidTarget(target, GetCastRange(myHero,_Q)) and QPred.HitChance == 1 and Brand.cb.QQB:Value() then
		CastSkillShot(_Q,QPred.PredPos.x,QPred.PredPos.y,QPred.PredPos.z)
		end

		if GoS:ValidTarget(target, GetCastRange(myHero,_R)) and Brand.cb.RCB:Value() and GetCurrentHP(target)+GetMagicShield(target)+GetDmgShield(target)+GetHPRegen(target) < GoS:CalcDamage(myHero, target, 0, CheckRDmg) then
	    if CanUseSpell(myHero,_R) == READY and CanUseSpell(myHero, _Q) ~= READY and CanUseSpell(myHero, _W) ~= READY and CanUseSpell(myHero, _E) ~= READY then
		CastTargetSpell(target, _R)

		end
		end
	end
	

   
  if Brand.KS.KSEb:Value() then
	KillSteal()
	end
	
  if Brand.Draws.DrawsEb:Value() then
	Drawings()
	end

if Brand.AutoLvlSpell.UpSpellEb:Value() then
	AutoUpSpell()
	end
end)

------------------------------------------------------- Start Function -------------------------------------------------------

 	------ Start Auto Level Up _Settings Full Q or Full W first ------
function AutoUpSpell()
 if Brand.AutoLvlSpell.UpSpellEb:Value() then
  if Brand.AutoLvlSpell.AutoSkillUp:Value() == 1 then leveltable = {_Q, _W, _E, _Q, _Q , _R, _Q , _Q, _W , _W, _R, _W, _W, _E, _E, _R, _E, _E} -- Full Q First
  elseif Sona.Miscset.AutoLvlUp.AutoSkillUp:Value() == 2 then leveltable = {_W, _Q, _E, _W, _W , _R, _W , _W, _Q , _Q, _R, _Q, _Q, _E, _E, _R, _E, _E} -- Full W First
  end
   LevelSpell(leveltable[GetLevel(myHero)])
 end
end

	------ Start Drawings ------
function Drawings()
  if Brand.Draws.DrawsEb:Value() then
if Brand.Draws.DrawQ:Value() and CanUseSpell(myHero,_Q) == READY then DrawCircle(GoS:myHeroPos().x, GoS:myHeroPos().y, GoS:myHeroPos().z,GetCastRange(myHero,_Q),1,100,0xffEE0000) end
if Brand.Draws.DrawW:Value() and CanUseSpell(myHero,_W) == READY then DrawCircle(GoS:myHeroPos().x, GoS:myHeroPos().y, GoS:myHeroPos().z,GetCastRange(myHero,_W),1,100,0xffCCFF66) end
if Brand.Draws.DrawText:Value() then
	for _, enemy in pairs(Gos:GetEnemyHeroes()) do
		 if GoS:ValidTarget(enemy) then
	local EnbIgnite = 0
	if Ignite and CanUseSpell(myHero, Ignite) == READY then
	EnbIgnite = EnbIgnite + 20*GetLevel(myHero)+50
	end
		    local originEnemies = GetOrigin(enemy)
		    local EnmTextPos = WorldToScreen(1,originEnemies.x, originEnemies.y, originEnemies.z)
		    local currhp = GetCurrentHP(enemy)
			local CheckQWERDmg = CheckQDmg + CheckWDmg + CheckEDmg + CheckRDmg
			local CheckQWEDmg = CheckQDmg + CheckWDmg + CheckEDmg
			local CheckWRDmg = CheckWDmg + CheckRDmg
			local CheckQRDmg = CheckQDmg + CheckRDmg
			local CheckERDmg = CheckEDmg + CheckRDmg
			local CheckQWDmg = CheckQDmg + CheckWDmg
			local CheckWEDmg = CheckWDmg + CheckEDmg
			local CheckQEDmg = CheckQDmg + CheckEDmg
		    if CanUseSpell(myHero, _Q) == READY and CanUseSpell(myHero, _W) == READY and CanUseSpell(myHero, _E) == READY and CanUseSpell(myHero, _R) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckQWERDmg,0xffffffff)
			elseif CanUseSpell(myHero, _Q) == READY and CanUseSpell(myHero, _W) == READY and CanUseSpell(myHero, _E) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckQWEDmg,0xffffffff)
			elseif CanUseSpell(myHero, _W) == READY and CanUseSpell(myHero, _R) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckWRDmg,0xffffffff)
			elseif CanUseSpell(myHero, _Q) == READY and CanUseSpell(myHero, _R) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckQRDmg,0xffffffff)
			elseif CanUseSpell(myHero, _E) == READY and CanUseSpell(myHero, _R) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckERDmg,0xffffffff)
			elseif CanUseSpell(myHero, _W) == READY and CanUseSpell(myHero, _Q) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckQWDmg,0xffffffff)
			elseif CanUseSpell(myHero, _W) == READY and CanUseSpell(myHero, _E) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckWEDmg,0xffffffff)
			elseif CanUseSpell(myHero, _Q) == READY and CanUseSpell(myHero, _E) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckQEDmg,0xffffffff)
			elseif CanUseSpell(myHero, _R) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckRDmg,0xffffffff)
			elseif CanUseSpell(myHero, _W) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckWDmg,0xffffffff)
			elseif CanUseSpell(myHero, _Q) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckQDmg,0xffffffff)
			elseif CanUseSpell(myHero, _E) == READY then
			DrawDmgOverHpBar(enemy,currhp,GetBaseDamage(myHero),CheckEDmg,0xffffffff)
			end
		end
		 end
	end
  end
end

	------ Start Kill Steal ------
function KillSteal()
 	if Brand.KS.KSEb:Value() then
 for i,enemy in pairs(GoS:GetEnemyHeroes()) do

        -- Kill Steal --
	   local QPred = GetPredictionForPlayer(GoS:myHeroPos(),enemy,GetMoveSpeed(enemy),2000,250,1100,60,true,false)
                               local WPred = GetPredictionForPlayer(GoS:myHeroPos(),enemy,GetMoveSpeed(enemy),0,850,1100,240,false,false)
	   
            if Ignite and Brand.KS.IgniteKS:Value() then
                  if CanUseSpell(myHero, Ignite) == READY and 20*GetLevel(myHero)+50 > GetCurrentHP(enemy)+GetHPRegen(enemy)*2.5 and GoS:GetDistanceSqr(GetOrigin(enemy)) < 600*600 then
                  CastTargetSpell(enemy, Ignite)
                  end
            end
		
	if CanUseSpell(myHero,_E) == READY and GoS:ValidTarget(enemy, GetCastRange(myHero,_E)) and Brand.KS.EKS:Value() and GetCurrentHP(enemy)+GetMagicShield(enemy)+GetDmgShield(enemy)+GetHPRegen(enemy) < GoS:CalcDamage(myHero, enemy, 0, CheckEDmg) then
	CastTargetSpell(enemy, _E)

	killable=1
	
	elseif CanUseSpell(myHero,_W) == READY and GoS:ValidTarget(enemy, GetCastRange(myHero,_W)) and WPred.HitChance == 1 and Brand.KS.WKS:Value() and GetCurrentHP(enemy)+GetMagicShield(enemy)+GetDmgShield(enemy)+GetHPRegen(enemy) < GoS:CalcDamage(myHero, enemy, 0, CheckWDmg) then
	CastSkillShot(_W,WPred.PredPos.x,WPred.PredPos.y,WPred.PredPos.z)
	killable=1
	
	elseif CanUseSpell(myHero,_Q) == READY and GoS:ValidTarget(enemy, GetCastRange(myHero,_Q)) and QPred.HitChance == 1 and Brand.KS.QKS:Value() and GetCurrentHP(enemy)+GetMagicShield(enemy)+GetDmgShield(enemy)+GetHPRegen(enemy) < GoS:CalcDamage(myHero, enemy, 0, CheckQDmg) then
	CastSkillShot(_Q,QPred.PredPos.x,QPred.PredPos.y,QPred.PredPos.z)
	killable=1
	
	elseif CanUseSpell(myHero,_R) == READY and GoS:ValidTarget(enemy, GetCastRange(myHero,_R)) and Brand.KS.RKS:Value() and GetCurrentHP(enemy)+GetMagicShield(enemy)+GetDmgShield(enemy)+(GetHPRegen(enemy)/5) < GoS:CalcDamage(myHero, enemy, 0, ((CheckRDmg)*2)) and ((CountEnemyHeroInRange(enemy,400)>=2 and CountEnemyHeroInRange(enemy,400)<=4) or (CountEnemyMinionInRange(enemy,400)>=1)) and GetCurrentMana(myHero)>=100 then
	CastTargetSpell(enemy, _R)

	killable=1
	
	elseif CanUseSpell(myHero,_R) == READY and GoS:ValidTarget(enemy, GetCastRange(myHero,_R)) and Brand.KS.RKS:Value() and GetCurrentHP(enemy)+GetMagicShield(enemy)+GetDmgShield(enemy)+(GetHPRegen(enemy)/5) < GoS:CalcDamage(myHero, enemy, 0, ((CheckRDmg)*3)) and ((CountEnemyHeroInRange(enemy,400)==2) or (CountEnemyMinionInRange(enemy,400)<=3 and (CountEnemyMinionInRange(enemy,400)>=1) and GotBuff(enemy,"brandablaze")~=0 )) and GetCurrentMana(myHero)>=100 then
	CastTargetSpell(enemy, _R)

	killable=1
	
	else
	killable=0
	end
 end
 	end
end
-------------------------------------------------------------------------------------------------------------------------
function CountEnemyHeroInRange(object,range)
  object = object or myHero
  local enemyInRange = 0
  for i, enemy in pairs(GoS:GetEnemyHeroes()) do
    if (enemy~=nil and GetTeam(myHero)~=GetTeam(enemy) and IsDead(enemy)==false) and GoS:GetDistance(object, enemy)<= range then
    	enemyInRange = enemyInRange + 1
    end
  end
  return enemyInRange
end
-------------------------------------------------------------------------------------------------------------------------
function CountEnemyMinionInRange(object,range)
	local minion = nil
	local minionInRange=0
	for k,v in pairs(GoS:GetAllMinions()) do
		local objTeam = GetTeam(v)
		if not minion and v and objTeam == GetTeam(object) then 
			minion = v 
		end
		if minion and v and objTeam == GetTeam(object) and GoS:GetDistanceSqr(GetOrigin(minion),GetOrigin(object)) > GoS:GetDistanceSqr(GetOrigin(v),GetOrigin(object)) then
			minion = v
		end
		if minion and v and objTeam == GetTeam(object) and GoS:GetDistance(GetOrigin(minion),GetOrigin(object))<=range then
			minionInRange=minionInRange+1
		end
	end
  return minionInRange
end
